START sandbox(f, timeout, verbose)
|
├── Initialize global variable g_to = 0
|
├── Fork a process (pid = fork())
|   |
|   ├── If fork fails (pid == -1)
|   |   └── Return -1
|   |
|   └── If in child process (pid == 0)
|       ├── Execute function f()
|       └── If f() returns, exit with code 0
|
├── In parent process:
|   |
|   ├── Set up SIGALRM handler (handle_timeout)
|   |   └── handler sets g_to = 1 when alarm triggers
|   |
|   └── Set alarm(timeout)
|
├── Wait for child process (waitpid(pid, &status, NULL))
|   |
|   ├── If waitpid fails
|   |   |
|   |   └── Enter error handling loop
|   |       |
|   |       ├── If error is EINTR (interrupted by signal)
|   |       |   |
|   |       |   ├── If g_to = 1 (timeout occurred)
|   |       |   |   ├── If verbose, print timeout message
|   |       |   |   ├── Kill child process (kill(pid, SIGKILL))
|   |       |   |   ├── Wait for child again (cleanup)
|   |       |   |   └── Return 0 (bad function)
|   |       |   |
|   |       |   └── If not timeout, continue loop
|   |       |
|   |       └── For other errors, return -1
|   |
|   └── If waitpid succeeds, analyze termination status
|       |
|       ├── If terminated by signal (WIFSIGNALED)
|       |   ├── If verbose, print signal message
|       |   └── Return 0 (bad function)
|       |
|       └── If exited normally (WIFEXITED)
|           |
|           ├── If exit code != 0
|           |   ├── If verbose, print exit code message
|           |   └── Return 0 (bad function)
|           |
|           └── If exit code = 0
|               ├── If verbose, print "Nice function!"
|               └── Return 1 (nice function)
|
END