(17.4.25 - re)
Assignment name 	:picoshell
Expected files 		:picoshell.c
Allowed functions	: close, fork, wait, exit, execvp, dup2, pipe
--------------------------------------------------------------------------------
Write the following function

int picoshell(char **cmds[]);

The goal of this function is to execute a pipeline.
It must execute each commands in cmds and connect the output of one to the input
of the next command (just like a shell)

Cmds contains a null-terminated list of valid commands.
Each element of cmds is an argv-like array representing a command, directly
useable for a call to execvp.
The first string of each command is the command name or path and can be
passed directly as the first argument of execvp.

If any error occur, the function must return 1 (you must, of course, close all 
the open file descriptors beforehand) otherwise the function must wait all child
 processes and return 0.

Your program should be able to manage more than hundreds of "|" even if we limit
 the number of "limit files" per process to less than 30.

You will find in this directory a file main.c which contains something to help you
test your function.

Example using the provided main() function:
$>./picoshell /bin/ls "|" /usr/bin/grep picoshell
picoshell
$>./picoshell echo 'squalala!' "|" cat "|" sed 's/a/b/g'
squblblb!

Hints:
Do not leak file descriptors!